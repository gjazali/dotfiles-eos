# Create and run Java class
run-java() {
  command javac $1 && java $1:gs/.java/
}

# Change display brightness (percentage)
bright() {
  brightnessctl set ${1}%
}

# Switch DNS-over-TLS (DoT) on and off
#
# Parameters: $1: {on|off}
#
dotctl() {
  if [[ $1 == 'off' ]]; then
    sudo sed -i -e 's|^DNSOverTLS=yes|DNSOverTLS=no|' /etc/systemd/resolved.conf \
      && sudo systemctl restart systemd-resolved
  elif [[ $1 == 'on' ]]; then
    sudo sed -i -e 's|^DNSOverTLS=no|DNSOverTLS=yes|' /etc/systemd/resolved.conf \
      && sudo systemctl restart systemd-resolved
  fi
}

# Tunnel connections with SSH and use a server as gateway
#
# Parameters $1: user@host
#
tunnel() {
  sshuttle -r $1 0.0.0.0/0
}

# Change charging limit
#
# Parameters: $1: {on|off|<any_number>}
#
tlpctl() {
  default_value=76
  if [[ $1 == 'off' ]]; then
    sudo sed -ire 's|^STOP_CHARGE_THRESH_BAT0=.*$|STOP_CHARGE_THRESH_BAT0=100|' /etc/tlp.conf \
      && sudo tlp start
  elif [[ $1 == 'on' ]]; then
    sudo sed -ire 's|^STOP_CHARGE_THRESH_BAT0=.*$|STOP_CHARGE_THRESH_BAT0=$default_value|' /etc/tlp.conf \
      && sudo tlp start
  else
    sudo sed -ire 's|^STOP_CHARGE_THRESH_BAT0=.*$|STOP_CHARGE_THRESH_BAT0='"$1"'|' /etc/tlp.conf \
      && sudo tlp start
  fi
}

# Benchmark CPU core using `7z`
#
# Parameters: $1: CPU Core ID (can be 0 to n where n is the number of core
# subtracted by one)
#
benchmarkcore() {
  taskset -c $1 7z b -mmt1
}

# Send SSH key to a remote machine using `ssh` (without `ssh-copy-id`)
#
# Parameters: $1: The public key file, e.g., `~/.ssh/id_rsa.pub`; $2: Username
# in the remote machine; $3: The public IP address or identifying domain of the
# remote machine
#
send-ssh-key() {
  cat $1 | ssh $2@$3 "mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys"
}

# Run job as asynchronous and without output
#
# Parameters: $1: Command; $2: Arguments of the command; $3: A `--no-disown`
# optional argument that keeps the process owned by the terminal
#
ra() {
  $1 $2 > /dev/null 2>&1 &
  [[ ! $3 == '--no-disown' ]] && disown || return 0
}

# List the first n files in a directory based on their date (the most
# recently-modified appears on the top)
#
# Parameters: $1: {h|t}; $2: The number of files
#
lsn() {
  # NOTE:
  # The piping to `sed` removes the `%T@` timestamp and the `./` character that
  # precedes the output of `find`
  find . -type f -printf "%T@ %p\n" \
    | sort -nr \
    | $([[ $1 == h ]] && echo "head" || echo "tail") -n $2 \
    | sed 's/^.\{24\}//g'
}

# Convert video from Apple's MOV format to MP4 and compressing it using the
# H.264 codec
#
# Parameters: $1 Name of the input file without the `.mov` extension; $2 Name
# of the desired output file without the `.mp4` extension
#
mov2mp4() {
  ffmpeg -i $1.mov -c:v libx264 -pix_fmt yuv420p $2.mp4
}

# Remove audio from video, i.e., making it silent
#
# Parameters: $1 Name of the input file
#
silence() {
  ffmpeg -i "$1" -c copy -an "${1%.*}_silent.${1#*.}"
}

# Convert `.ipynb` files to `.html`
#
# Parameters: $1: The `.ipynb` file name without the extension (if the
# extension is included, the function will remove it automatically)
#
jupyter2html() {
  random_hex=$(openssl rand -hex 4)
  [[ $1 == *.ipynb ]] && file=$(echo $1 | sed -e "s/\.ipynb$//") || file=$1
  temp_file=$file.no_metadata_widgets.$random_hex.ipynb

  jq -M 'del(.metadata.widgets)' $file.ipynb > $temp_file
  jupyter nbconvert --to html $temp_file --output $file.html
  gio trash $temp_file
}

# Zip and unzip EPUB files
#
# When zipping, this function is designed to be used from *inside* the
# directory
#
# Parameters: $1: {zip|unzip}; $2: The name of the new `.epub` file without the
# extension (if the extension is included, the function will remove it
# automatically); $3 For $1=unzip only, specify the name of the directory for
# the unzipped file
#
epubctl() {
  if [[ $1 == "zip" ]]; then
    [[ $2 == *.epub ]] && file=$(echo $2 | sed -e "s/\.epub$//") || file=$2
    zip -rX ../$file.epub ./* # mimetype META-INF/ OEBPS/
  elif [[ $1 == "unzip" ]]; then
    unzip $2 -d $3
  else
    >&2 echo 'Invalid argument for `$1`' && false # Output error code 1
  fi
}

# Copy plain text file content to clipboard
#
# Parameters: $1: The name of the file
#
copypt() {
  xclip -selection c < $1
}

# Copy plain text file content to clipboard and move to trash afterwards
#
# Parameters: $1: The name of the file
#
copyptrm() {
  xclip -selection c < $1 && gio trash $1
}

# Mount `rclone` volumes
#
# Parameters: $1: Remote name (e.g. onedrive); $2: Remote directory; $3: Local
# directory (e.g. ~/OneDrive)
#
rcmount() {
  if [[ $1 == 'onedrive' ]]; then
    if [[ $2 == '/' ]]; then
      rclone mount onedrive: $3 --onedrive-delta --vfs-cache-mode full --drive-chunk-size 128M &
    else
      rclone mount onedrive:$2 $3 --onedrive-delta --vfs-cache-mode full --drive-chunk-size 128M &
    fi
  elif [[ $1 == 'googledrive' ]]; then
    if [[ $2 == '/' ]]; then
      rclone mount googledrive: $3 --vfs-cache-mode full --drive-chunk-size 128M &
    else
      rclone mount googledrive:$2 $3 --vfs-cache-mode full --drive-chunk-size 128M &
    fi
  else
    >&2 echo 'Invalid argument for `$1`' && false # Output error code 1
  fi
}

# Unmount `rclone` volumes
#
# Parameters: $1: Remote name (e.g. onedrive); $2: Local directory (e.g.
# ~/OneDrive)
#
rcumount() {
  fusermount -u $1
}

# Find an item inside a directory
#
# Parameters: $1: The type of item; $2: The regex of the item excluding the `./`
#
search() {
  find . -type $1 -regex "./$2"
}

# Make the image's width and height equal by creating paddings on the
# appropriate axis (left & rignt or top & bottom).
#
# Function will fail if ImageMagick (i.e. `convert`) is not installed or not on
# `$PATH`.
#
# Parameters: $1: Input; $2: Output; $3: Background (e.g. 'transparent',
# 'white')
#
square-image() {
  if ! command -v convert &> /dev/null ; then
    >&2 echo 'ImageMagick is either not installed or not on `$PATH`'
    return 1
  fi

  local w=$(identify -format '%w' $1)
  local h=$(identify -format '%h' $1)
  local d=$(($w - $h))
  local da=${d#-}
  local additional
  local extent_args
  local splice_args

  [[ $(($da / 2 + $da / 2)) == $da ]] && additional=0 || additional=1

  if [[ $(($w)) > $(($h)) ]]; then
    extent_args="${w}x$(($h + $da / 2))"
    splice_args="0x$(($da / 2 + $additional))"
  else
    extent_args="$(($w + $da / 2))x${h}"
    splice_args="$(($da / 2 + $additional))x0"
  fi

  command convert \
    -extent $extent_args -background $3 \
    -splice $splice_args -background $3 \
    $1 $2
}
